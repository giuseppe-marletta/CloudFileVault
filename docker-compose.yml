
services:
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"  # Porta RabbitMQ (AMQP)
      - "15672:15672"  # Porta di management GUI
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    networks:
      - usermanager-network

  auth-service:
    build:
      context: ./auth-service
    ports:
      - "8081:8080"  # Espone il servizio sulla porta 8081
    depends_on:
      - rabbitmq  # Assicura che RabbitMQ sia avviato prima del servizio
      - dynamodb-local
    links:
     - "dynamodb-local"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - AWS_ACCESS_KEY_ID=key
      - AWS_SECRET_ACCESS_KEY=key2
      - REGION=eu-west-2
      - AWS_DYNAMODB_ENDPOINT=http://dynamodb-local:8000
    networks:
      - usermanager-network

  user-service:
    build:
      context: ./user-service
    ports:
      - "8082:8080"  # Espone il servizio sulla porta 8082
    depends_on:
      - rabbitmq
    environment:
      - SPRING_PROFILES_ACTIVE=dev
    networks:
      - usermanager-network

  notification-service:
    build:
      context: ./notification-service
    ports:
      - "8083:8080"  # Espone il servizio sulla porta 8083
    depends_on:
      - rabbitmq
    environment:
      - SPRING_PROFILES_ACTIVE=dev
    networks:
      - usermanager-network
  
  dynamodb-local:
   command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data"
   image: "amazon/dynamodb-local:latest"
   container_name: dynamodb-local
   ports:
     - "8000:8000"
   volumes:
     - "./docker/dynamodb:/home/dynamodblocal/data"
   working_dir: /home/dynamodblocal
   networks:
     - usermanager-network

networks:
  usermanager-network:
    driver: bridge
